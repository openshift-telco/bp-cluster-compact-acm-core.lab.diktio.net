---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: hook-succeeded
    #helm.sh/hook-weight: "-5"
  name: preinstall-{{ $.Values.cluster.name }}-csv-wait-ocs-prepare-job
  namespace: {{ $.Values.global.gitops.namespace }}
spec:
  template:
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: {{ $.Values.global.gitops.service_account }}
      serviceAccountName: {{ $.Values.global.gitops.service_account_name }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: {{ $.Values.cluster.name }}-csv-wait-ocs-prepare-job
          image: {{ $.Values.global.gitops.hook_image | quote }}
          imagePullPolicy: IfNotPresent
          env:
          - name: SLEEP
            value: "3"
          command:
            - /bin/bash
            - -c
            - |
              echo "ODF PreInstall Hook"
              CSV_NAME=$(oc get csv -n openshift-storage  | egrep odf-operator | awk '{print $1}')
              CSV_STATUS="Pausing $SLEEP seconds..."
              while [ "$CSV_STATUS" != "InstallSucceeded" ]; do
                echo "Waiting for the ODF Operator to be ready. ($CSV_STATUS)"
                sleep $SLEEP
                CSV_STATUS=$( oc get csv -n openshift-storage $CSV_NAME -o jsonpath={..status.conditions[-1:].reason} )
              done
              echo "ODF done!"
              # If internal OCS then wait for VolumeSet
              if [ {{ coalesce $.Values.cluster.default_storage_class $.Values.mgmt.default_storage_class | quote }} = "ocs-storagecluster-ceph-rbd" ]; then
                echo "Now Wait for LSO VolumeSet"
                CSV_STATUS="Pausing $SLEEP seconds..."
                while [ "$CSV_STATUS" != "Available" ]; do
                  echo "Waiting for LSO volume set ($CSV_STATUS)"
                  sleep $SLEEP
                  CSV_STATUS=$( oc get localvolumeset -n openshift-local-storage ocs-local-volume-set -o jsonpath={..status.conditions[-1:].type} )
                done
              fi
              # LABEL nodes
              {{- range $.Values.cluster.nodes }}
                {{- range . }}
              NODE_NAME=$(oc get nodes | egrep {{ .name }} | awk '{print $1}')
                  {{- if eq .ocs "true" }}
              oc label node $NODE_NAME cluster.ocs.openshift.io/openshift-storage=''
                  {{- end }}
                {{- end }}
              {{- end }}
              echo "All done! Hooray!"