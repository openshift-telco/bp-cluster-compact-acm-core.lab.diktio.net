---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: hook-succeeded
    #helm.sh/hook-weight: "-5"
  name: preinstall-{{ $.Values.cluster.name }}-ai-wait-cluster-deploy-job
  namespace: {{ $.Values.global.gitops.namespace }}
spec:
  template:
    spec:
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: {{ $.Values.global.gitops.service_account }}
      serviceAccountName: {{ $.Values.global.gitops.service_account_name }}
      terminationGracePeriodSeconds: 30
      containers:
        - image:  {{ $.Values.global.gitops.hook_image }}
          imagePullPolicy: IfNotPresent
          name: {{ $.Values.cluster.name }}-ai-wait-cluster-deploy-job
          env:
            - name: SLEEP
              value: "15"
          command:
            - /bin/bash
            - -c
            - |
              echo "Cluster Post Install Hook"
              sleep 300
              URL_READY="Pausing $SLEEP seconds..."
              while [ "$URL_READY" != "https" ]; do
                echo "Waiting for the AI events status URL to be ready. ($URL_READY)"
                sleep $SLEEP
                URL=$(oc -n {{ $.Values.cluster.name }} get agentclusterinstalls.extensions.hive.openshift.io aci-{{ $.Values.cluster.name }} -o=jsonpath="{.status.debugInfo.eventsURL}")
                URL_READY=$(echo $URL | awk -F ":" '{print $1}')
              done
              INSTALL_STATUS="Waiting for cluster to complete install"
              while :
              do
                echo "Waiting for the cluster to complete installation. ($INSTALL_STATUS)"
                # need to refresh the URL every time to avoid using the old URL at times where the deploy was deleted and restarted
                URL=$(oc -n {{ $.Values.cluster.name }} get agentclusterinstalls.extensions.hive.openshift.io aci-{{ $.Values.cluster.name }} -o=jsonpath="{.status.debugInfo.eventsURL}")
                sleep $SLEEP
                if `curl -s -k $URL | egrep "Successfully completed installing cluster" -q`
                then break
                fi
                if `curl -s -k $URL | egrep "Successfully finished installing cluster" -q`
                then break
                fi
              done
              echo "All done! Hooray!"


